#ifdef mrw_rivers
      subroutine rivinit
      implicit none
#include "param.h"
#include "grdvara.h"
#include "riv.h"
#include "levinda.h"
      real nseg1,nseg2,fx
      integer ii,jj,ll,it,testpoint,testfield,nhole

c------------------------------------------------------------
c set up runoff grid with a resolution 1/dxyscale
c that of the atmospheric model
c------------------------------------------------------------

      do j=1,jmtr
      do i=2,imtr-1
      ii=int((i-2)/dxyscale)+2
      jj=int((j-1)/dxyscale)+1
      dxriv(i,j)=dxta(ii,jj)/dxyscale
      end do
#ifdef cyclic
      dxriv(1,j)=dxriv(imtr-1,j)
      dxriv(imtr,j)=dxriv(2,j)
#endif
      end do
 
      do j=1,jmtr
      do i=2,imtr-1
      jj=int((j-1)/dxyscale)+1
      ii=int((i-2)/dxyscale)+2
      dyriv(i,j)=dyta(ii,jj)/dxyscale
      end do
#ifdef cyclic
      dyriv(1,j)=dyriv(imtr-1,j)
      dyriv(imtr,j)=dyriv(2,j)
#endif
      end do


c----------------------------------------------------------------
c  read in land topography with a resolution of 1/3x1/4 degree
c  note values are in m 
c----------------------------------------------------------------

      call transformrivertopog(1)

c---------------------------------------------------------------
c  set points at or below sea level to 1m
c  (points which are actally ocean in the OGCM are then set to 0m)
c---------------------------------------------------------------

      do j=1,jmtr
      do i=1,imtr
      if(ltop(i,j).le.0)ltop(i,j)=1
      end do
      end do

c--------------------------------------------------------------
c set points defined as ocean by kmta to 0m
c--------------------------------------------------------------

      do j=1,jmtr
      do i=2,imtr-1
      ii=int((i-2)/dxyscale)+2
      jj=int((j-1)/dxyscale)+1
      if(kmta(ii,jj).eq.0)ltop(i,j)=0
      end do
      end do
      print *,imtr,jmtr
c     do j=1,jmtr
c     do i=1,imtr
c      if(j.eq.jmtr/2)print *,i,ltop(i,j)
c     end do
c     write(54,54)(ltop(i,j),i=1,imtr)
c     end do
c  54 format(13i6)

c----------------------------------------------------------------
c fill in holes
c----------------------------------------------------------------

      it=0
  500 continue
      nhole=0
      it=it+1
      testfield=0

      do j=2,jmtr-1
      do i=2,imtr-1

      if(ltop(i,j).gt.0)then

      testpoint=0
      do l=-1,1
      do ll=-1,1
      if(l.eq.0.and.ll.eq.0)then
      else
      if(ltop(i+l,j+ll).lt.ltop(i,j))then
      testpoint=1
      endif
      endif
      end do
      end do

      if(testpoint.eq.0)then
      ltop(i,j)=ltop(i,j)+10
      testfield=1
      nhole=nhole+1
      endif

      endif
      end do
      end do

#ifdef cyclic
c--------------------------------------------------------------
c  set cyclic boundary conditions
c--------------------------------------------------------------

      do j=1,jmtr
      ltop(1,j)=ltop(imtr-1,j)
      ltop(imtr,j)=ltop(2,j)
      end do
#endif

      if(testfield.eq.1)then
      if(mod(nhole,10).eq.0)
     & print *,'iteration ',it,'no. of holes is ',nhole
      goto 500
      endif

#ifdef cyclic
c--------------------------------------------------------------
c  set cyclic boundary conditions
c--------------------------------------------------------------

      do j=1,jmtr
      ltop(1,j)=ltop(imtr-1,j)
      ltop(imtr,j)=ltop(2,j)
      end do
#endif

c     do j=2,jmta-1
c     do i=2,imta-1
c     fx=0
c     do l=-1,1
c     do ll=-1,1
c     if(kmta(i+l,j+ll).eq.1)fx=1
c     end do
c     end do
c     if(kmta(i,j).eq.0.and.fx.eq.1)dd(i,j)=1
c     end do
c     end do
c     do j=1,jmta
c     write(95,45)(dd(i,j),i=1,imta)
c     end do
c  45 format(80i1)      
c     do j=1,9
c     do i=1,imta
c     if(dd(i,j).eq.1)write(95,46)i,j
c     end do
c     end do
c  46 format('      rivername(',i2,',',i2,')='ANTARCTICA   6'')
c     do j=10,jmta
c     do i=1,imta
c     if(dd(i,j).eq.1)write(95,45)i,j
c     end do
c     end do
c  45 format('      rivername(',i2,',',i2,')=')

c--------------------------------------------------------------
c  set time levels
c--------------------------------------------------------------

      nriv=1
      npriv=2


      return

      end



      subroutine rivmodel
      implicit none
#include "param.h"
#include "riv.h"
#include "grdvara.h"
#include "atm.h"
#include "cembm.h"
#include "levinda.h"

      real triver,qriver,areaubox,arealbox,
     &     drivn,drivne,drive,drivse,drivs
     & ,drivsw,drivw,drivnw,fx,vriver
      real gradient(imtr,jmtr)
      real tothriver,dh,c15,c35,c50,fiveemfive,dtsriv
      integer ii,jj,il,jl,ntemp,start,in0
      integer*1 dir(imtr,jmtr,2)

      c35=35.0
      c15=15.0
      c50=50.0
      in0=0
      fiveemfive=1.e-5

c------------------------------------------------------------
c  move down time levels and set time step
c------------------------------------------------------------

      ntemp=nriv
      nriv=npriv
      npriv=ntemp

      dtsriv=dtatm

c------------------------------------------------------------
c  initialise runoff array to zero
c------------------------------------------------------------

      do j=1,jmta
      do i=1,imta
      runoff(i,j)=0.0
      end do
      end do

c------------------------------------------------------------
c  set hriver(i,j,npriv) equal to hriver(i,j,nriv)
c  so that flow direction is based on nriv time level
c  and npriv time level is used to save new values of hriver
c------------------------------------------------------------

      do j=1,jmtr
      do i=1,imtr
      hriver(i,j,npriv)=hriver(i,j,nriv)
      end do
      end do

c------------------------------------------------------------
c  set cyclic points at next time level 
c  to zero water height so as to only
c  accumulate next time step's water
c------------------------------------------------------------

      do j=1,jmtr
      hriver(1,j,npriv)=0.0
      hriver(imtr,j,npriv)=0.0
      end do      

c------------------------------------------------------------
c  determine runoff route
c------------------------------------------------------------

c alter this to recalculate runoff route
c during run if changing ice cover

      if(start.eq.0.0)then
      start=1.0

      do j=2,jmtr-1
      do i=2,imtr-1
     
      if(ltop(i,j).gt.0)then

c------------------------------------------------------------
c  find lowest surrounding box 
C  (can include ice depth here if necessary)
c------------------------------------------------------------

      drive=(dxriv(i,j)+dxriv(i+1,j))*0.5
      drivw=(dxriv(i,j)+dxriv(i-1,j))*0.5
      drivn=(dyriv(i,j)+dyriv(i,j+1))*0.5
      drivs=(dyriv(i,j)+dyriv(i,j-1))*0.5
      drivne=sqrt(drive*drive+drivn*drivn)
      drivnw=sqrt(drivw*drivw+drivn*drivn)
      drivse=sqrt(drive*drive+drivs*drivs)
      drivsw=sqrt(drivw*drivw+drivs*drivs)

      gradient(i,j)=(ltop(i,j)-ltop(i+1,j))/drive
      dir(i,j,1)=1
      dir(i,j,2)=0

      fx=(ltop(i,j)-ltop(i-1,j))/drivw
      if(fx.gt.gradient(i,j))then
      dir(i,j,1)=-1
      dir(i,j,2)=0
      gradient(i,j)=fx
      endif

      fx=(ltop(i,j)-ltop(i,j+1))/drivn
      if(fx.gt.gradient(i,j))then
      dir(i,j,1)=0
      dir(i,j,2)=1
      gradient(i,j)=fx
      endif

      fx=(ltop(i,j)-ltop(i,j-1))/drivs
      if(fx.gt.gradient(i,j))then
      dir(i,j,1)=0
      dir(i,j,2)=-1
      gradient(i,j)=fx
      endif

      fx=(ltop(i,j)-ltop(i+1,j+1))/drivne
      if(fx.gt.gradient(i,j))then
      dir(i,j,1)=1
      dir(i,j,2)=1
      gradient(i,j)=fx
      endif
 
      fx=(ltop(i,j)-ltop(i+1,j-1))/drivse
      if(fx.gt.gradient(i,j))then
      dir(i,j,1)=1
      dir(i,j,2)=-1
      gradient(i,j)=fx
      endif

      fx=(ltop(i,j)-ltop(i-1,j-1))/drivsw
      if(fx.gt.gradient(i,j))then
      dir(i,j,1)=-1
      dir(i,j,2)=-1
      gradient(i,j)=fx
      endif

      fx=(ltop(i,j)-ltop(i-1,j+1))/drivnw
      if(fx.gt.gradient(i,j))then
      dir(i,j,1)=-1
      dir(i,j,2)=1
      gradient(i,j)=fx 
      endif

c-------------------------------------------------------------
c  convert gradient from m/cm to cm/cm
c-------------------------------------------------------------

      gradient(i,j)=gradient(i,j)*c100

      endif
      end do
      end do

      endif

c------------------------------------------------------------
c  for each land grid box
c------------------------------------------------------------

      do j=2,jmtr-1
      do i=2,imtr-1

      if(ltop(i,j).gt.in0)then
      il=i+dir(i,j,1)
      jl=j+dir(i,j,2)

c-------------------------------------------------------------
c  calculate velocity of river and set upper and lower limits
c  set to zero if below zero
c-------------------------------------------------------------

      if(gradient(i,j).lt.0.0)print *,i,j,gradient(i,j)
      ii=int((i-2)/dxyscale)+2
      jj=int((j-1)/dxyscale)+1
#ifdef uvic_embm_ice
#ifdef uvic_embm_mountains
      if((at(ii,jj,2,1)-elev(ii,jj)/14285.).lt.-10.0)then
#else
      if(at(ii,jj,2,1).lt.-10.0)then
#endif
      vriver=1
      else
      vriver=c35*sqrt(gradient(i,j)/fiveemfive)
      if(vriver.lt.c15)vriver=c15
      if(vriver.gt.c50)vriver=c50
      endif
#else
      vriver=c35*sqrt(gradient(i,j)/fiveemfive)
      if(vriver.lt.c15)vriver=c15
      if(vriver.gt.c50)vriver=c50
#endif

c-------------------------------------------------------------
c  calculate time scale to drain grid box and volume loss
c-------------------------------------------------------------

      areaubox=dxriv(i,j)*dyriv(i,j)
      arealbox=dxriv(il,jl)*dyriv(il,jl)
      triver=sqrt(areaubox)/vriver
      if(triver.lt.abs(dtsriv))triver=abs(dtsriv)
      qriver=areaubox*hriver(i,j,nriv)/triver

c-------------------------------------------------------------
c  if lowest box is land drain grid box into its lowest neighbour
c-------------------------------------------------------------

      if(ltop(il,jl).gt.0.0)then

      hriver(il,jl,npriv)=hriver(il,jl,npriv) + dtsriv*
     &    qriver/arealbox
      hriver(i,j,npriv)=hriver(i,j,npriv) - dtsriv*
     &    qriver/areaubox

c------------------------------------------------------------
c  else accumulate in runoff array with atmos model resolution
c------------------------------------------------------------

      else

      hriver(i,j,npriv)=hriver(i,j,npriv) - dtsriv*
     &    qriver/areaubox

      ii=int((il-2)/dxyscale)+2
      jj=int((jl-1)/dxyscale)+1

      runoff(ii,jj)=runoff(ii,jj)+qriver*dtsriv
      endif

c------------------------------------------------------------
c  add p-e
c------------------------------------------------------------

      ii=int((i-2)/dxyscale)+2
      jj=int((j-1)/dxyscale)+1

      hriver(i,j,npriv)=hriver(i,j,npriv)+
#ifdef landevap
     &  dtsriv*(precip(ii,jj)-evap(ii,jj))
#else
     &  dtsriv*precip(ii,jj)
#endif

c-----------------------------------------------------------
c  ensure hriver is not negative
c-----------------------------------------------------------

      if(hriver(i,j,npriv).lt.0.0)hriver(i,j,npriv)=0.0

c-----------------------------------------------------------
c  next point.........
c-----------------------------------------------------------

      endif

      end do
      end do

#ifdef cyclic
c-----------------------------------------------------------
c  set cyclic boundary conditions
c-----------------------------------------------------------

      do j=1,jmta
      runoff(1,j)=runoff(imta-1,j)
      runoff(imta,j)=runoff(2,j)
      end do

      do j=1,jmtr
      hriver(imtr-1,j,npriv)=hriver(imtr-1,j,npriv)+hriver(1,j,npriv)
      hriver(2,j,npriv)=hriver(2,j,npriv)+hriver(imtr,j,npriv)
      hriver(1,j,npriv)=hriver(imtr-1,j,npriv)
      hriver(imtr,j,npriv)=hriver(2,j,npriv)
      end do
#endif
c martin
      tothriver=0.0
      do i=2,imtr-1
      do j=2,jmtr-1
      ii=int((i-2)/dxyscale)+2
      jj=int((j-1)/dxyscale)+1

      if(kmta(ii,jj).eq.1)tothriver=tothriver+hriver(i,j,npriv)*
     &  dxriv(i,j)*dyriv(i,j)

      end do
      end do

      return
      end 

#endif

